---
- name: "{{ test_id | upper }} Converge - cv_deploy with duplicated devices in inventory and non-default strict_system_mac_address"
  hosts: SITE1_FABRIC
  connection: local
  gather_facts: false
  vars:
    cv_server: "{{ lookup('env', 'CV_SERVER') }}"
    cv_token: "{{ lookup('env', 'CV_ACCESS_TOKEN') }}"
    proxy_host: "{{ lookup('env', 'CV_PROXY_HOST') | default('', true) }}"
    proxy_port: "{{ lookup('env', 'CV_PROXY_PORT') | default(3128, true) | int }}"
    proxy_username: "{{ lookup('env', 'CV_PROXY_USERNAME') | default('', true) }}"
    proxy_password: "{{ lookup('env', 'CV_PROXY_PASSWORD') | default('', true) }}"
    cv_verify_certs: "{{ lookup('env', 'CV_VERIFY_CERTS') | default(true, true) | bool }}"
    cv_skip_missing_devices: true
    eos_config_dir: "{{ playbook_dir }}/intended/configs/test_configs"
    original_structured_dir: "{{ playbook_dir }}/intended/structured_configs/test_configs"
    structured_dir: "{{ playbook_dir }}/intended/structured_configs/test_duplicated_devices_configs"
    intended_tag_device: avd-ci-leaf1
    intended_tags: "{{ lookup('file', structured_dir ~ '/' ~ intended_tag_device ~ '.yml')| from_yaml }}"
    test_id: "duplicated-inventory-devices-strict-mac-true"
    cv_common_pattern: "avd_cv-deploy_{{ test_id }}"

  tasks:
    - name: "{{ test_id | upper }} Banner"
      tags: ["{{ test_id }}"]
      run_once: true
      ansible.builtin.debug:
        msg:
          - "{{ ('#' * (31 + test_id | length))[:100] }}"
          - "### STARTING MOLECULE TEST {{ test_id[:69] | upper }} ###"
          - "{{ ('#' * (31 + test_id | length))[:100] }}"

    - name: "{{ test_id | upper }} Create target structured_config directory if it doesn't exist"
      tags: ["{{ test_id }}"]
      run_once: true
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ structured_dir }}"
        state: directory
        mode: '0755'

    - name: "{{ test_id | upper }} Remove interesting files inside structured_config directory (if they exist)"
      tags: ["{{ test_id }}"]
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ structured_dir }}/{{ inventory_hostname }}.yml"
        state: absent

    - name: "{{ test_id | upper }} Fetch device inventory stats from CV {{ cv_server }} for all targeted devices"
      tags: ["{{ test_id }}"]
      delegate_to: localhost
      ansible.legacy.uri:
        url: "https://{{ cv_server }}/api/resources/inventory/v1/Device/all"
        use_proxy: "{{ true if proxy_host and proxy_port else false }}"
        validate_certs: "{{ cv_verify_certs }}"
        return_content: true
        headers:
          Accept: "application/json"
          Content-Type: "application/json"
          Authorization: "Bearer {{ cv_token }}"
        method: POST
        body_format: json
        body:
          {
            "partialEqFilter": [
              {
                "hostname": "{{ inventory_hostname }}"
              }
            ]
          }
        timeout: 10
      register: device_inventory_status_on_cv
      until: >
        device_inventory_status_on_cv.status == 200 and (device_inventory_status_on_cv.json.result.value.key.deviceId | default('') | length > 0) and
        (device_inventory_status_on_cv.json.result.value.systemMacAddress | default('') | length > 0)
      retries: 10
      delay: 10
      # Set HTTPS_PROXY environment variable scoped for this task only
      environment:
        https_proxy: >-
          http://{{ (proxy_username and proxy_password) | ternary(proxy_username ~ ':' ~ proxy_password ~ '@', '') }}{{ proxy_host }}:{{ proxy_port }}

    - name: "{{ test_id | upper }} Process raw device_inventory_status_on_cv variables"
      tags: ["{{ test_id }}"]
      ansible.builtin.set_fact:
        serial_number: "{{ device_inventory_status_on_cv.json.result.value.key.deviceId }}"
        metadata:
          system_mac_address: "{{ device_inventory_status_on_cv.json.result.value.systemMacAddress }}"

    - name: "{{ test_id | upper }} Expose new variables set on DUTs"
      tags: ["{{ test_id }}"]
      ansible.builtin.debug:
        msg:
          - "DEVICE {{ inventory_hostname }} | SERIAL_NUMBER: {{ serial_number }} | SYSTEM_MAC_ADDRESS: {{ metadata.system_mac_address }}"

    - name: "{{ test_id | upper }} Copy content of the original test's structured_config files into new structured_config files"
      tags: ["{{ test_id }}"]
      delegate_to: localhost
      ansible.builtin.copy:
        src: "{{ original_structured_dir }}/{{ inventory_hostname }}.yml"
        dest: "{{ structured_dir }}/{{ inventory_hostname }}.yml"
        mode: "0644"

    - name: "{{ test_id | upper }} Update content of the structured_config files with new serial_number variable"
      tags: ["{{ test_id }}"]
      ansible.builtin.lineinfile:
        line: "serial_number: {{ hostvars['avd-ci-leaf1'].serial_number if inventory_hostname == 'avd-ci-leaf2' else serial_number }}"
        path: "{{ structured_dir }}/{{ inventory_hostname }}.yml"
        create: true
        mode: "0644"
        insertbefore: BOF
      no_log: true

    - name: "{{ test_id | upper }} Read current content of the structured files"
      tags: ["{{ test_id }}"]
      ansible.builtin.slurp:
        src: "{{ structured_dir }}/{{ inventory_hostname }}.yml"
      register: structured_config_file_content

    - name: "{{ test_id | upper }} Update content of the structured_config files with new metadata.system_mac_address variable if metadata is not present"
      tags: ["{{ test_id }}"]
      ansible.builtin.lineinfile:
        line: |-
          metadata:
            system_mac_address: {{
              hostvars['avd-ci-spine1'].metadata.system_mac_address
              if inventory_hostname == 'avd-ci-spine2' else metadata.system_mac_address
            }}
        path: "{{ structured_dir }}/{{ inventory_hostname }}.yml"
        create: true
        mode: "0644"
        insertbefore: BOF
      no_log: true
      when: "'metadata:' not in structured_config_file_content.content | b64decode"

    - name: "{{ test_id | upper }} Update metadata in the structured_config files with new metadata.system_mac_address variable if metadata is already present"
      tags: ["{{ test_id }}"]
      ansible.builtin.lineinfile:
        line: |-
          metadata:
            system_mac_address: {{
              hostvars['avd-ci-spine1'].metadata.system_mac_address
              if inventory_hostname == 'avd-ci-spine2' else metadata.system_mac_address
            }}
        path: "{{ structured_dir }}/{{ inventory_hostname }}.yml"
        regexp: '^metadata:'
      no_log: true
      when: "'metadata:' in structured_config_file_content.content | b64decode"

    - name: "{{ test_id | upper }} {{ 'Read' if lookup('env', 'MOLECULE_EXECUTION_ID') else 'Generate' }} molecule execution ID"
      tags: ["{{ test_id }}"]
      run_once: true
      ansible.builtin.set_fact:
        r: "{{ lookup('env', 'MOLECULE_EXECUTION_ID') or lookup('password', '/dev/null chars=ascii_lowercase,digits length=4') }}"

    - name: "{{ test_id | upper }} Code block to provision CVP with AVD configuration"
      tags: ["{{ test_id }}"]
      run_once: true
      delegate_to: localhost

      block:

        - name: "(BLOCK) {{ test_id | upper }} Banner"
          tags: ["{{ test_id }}"]
          run_once: true
          ansible.builtin.debug:
            msg:
              - "### ENGAGE CV_DEPLOY ROLE TO PUSH CONFIGURATION FOR {{ test_id[:69] | upper }} ###"

        # This task is expected to fail
        - name: "(BLOCK) {{ test_id | upper }} Provision CVP with AVD configuration containing overlapping devices and non-default strict_system_mac_address"
          run_once: true
          ansible.builtin.import_role:
            name: arista.avd.cv_deploy
          vars:
            cv_workspace_name: "{{ cv_common_pattern }}-{{ r }}-converge"
            cv_workspace_description: "{{ (cv_common_pattern + '-' + r + '-converge') | upper }}"
            cv_submit_workspace: false
            cv_strict_system_mac_address: true
            cv_register_detailed_results: true

        # If task above did not fail for whatever reason - execute following task to catch this
        # Task below is not expected to run under normal conditions
        - name: "(BLOCK) {{ test_id | upper }} Force failure"
          tags: ["{{ test_id }}"]
          run_once: true
          ansible.builtin.fail:
            msg: "Previous task was expected to fail but something went wrong."
          register: force_failure

      rescue:

        - name: "(RESCUE) {{ test_id | upper }} Force failure"
          tags: ["{{ test_id }}"]
          run_once: true
          ansible.builtin.fail:
            msg: "Call towards CV inside BLOCK was expected to FAIL but has not. Please investigate (check EOS/CV states and streaming, etc.)."
          when: force_failure is defined

        # Clear failed state of failed hosts for next engaged playbook (no impact within running playbook)
        - name: "(RESCUE) {{ test_id | upper }} Reset ansible_play_hosts for next playbook (no impact within running playbook)"
          tags: ["{{ test_id }}"]
          ansible.builtin.meta: clear_host_errors

        - name: "(RESCUE) {{ test_id | upper }} Check and assert CVP returns"
          tags: ["{{ test_id }}"]
          run_once: true
          ansible.builtin.assert:
            that:
              # workspace state
              - cv_deploy_results.workspace.state != cv_deploy_results.workspace.requested_state
              # confirm initial overlapping of system_mac_address on avd-ci-spine1 and avd-ci-spine2
              - >
                cv_deploy_results.configs | selectattr('device', 'defined') | selectattr('device.hostname', 'equalto', 'avd-ci-spine1') |
                map(attribute='device.system_mac_address') ==
                cv_deploy_results.configs | selectattr('device', 'defined') | selectattr('device.hostname', 'equalto', 'avd-ci-spine2') |
                map(attribute='device.system_mac_address')
              # confirm lack of initial overlapping of serial_number on avd-ci-spine1 and avd-ci-spine2
              - >
                cv_deploy_results.configs | selectattr('device', 'defined') | selectattr('device.hostname', 'equalto', 'avd-ci-spine1') |
                map(attribute='device.serial_number') !=
                cv_deploy_results.configs | selectattr('device', 'defined') | selectattr('device.hostname', 'equalto', 'avd-ci-spine2') |
                map(attribute='device.serial_number')
              # confirm initial overlapping of serial_number on avd-ci-leaf1 and avd-ci-leaf2
              - >
                cv_deploy_results.configs | selectattr('device', 'defined') | selectattr('device.hostname', 'equalto', 'avd-ci-leaf1') |
                map(attribute='device.serial_number') ==
                cv_deploy_results.configs | selectattr('device', 'defined') | selectattr('device.hostname', 'equalto', 'avd-ci-leaf2') |
                map(attribute='device.serial_number')
              # confirm lack of initial overlapping of system_mac_address on avd-ci-leaf1 and avd-ci-leaf2
              - >
                cv_deploy_results.configs | selectattr('device', 'defined') | selectattr('device.hostname', 'equalto', 'avd-ci-leaf1') |
                map(attribute='device.system_mac_address') !=
                cv_deploy_results.configs | selectattr('device', 'defined') | selectattr('device.hostname', 'equalto', 'avd-ci-leaf2') |
                map(attribute='device.system_mac_address')
              # confirm that cv_deploy has failed
              - cv_deploy_results.failed is defined and cv_deploy_results.failed
              # confirm there are no warnings returned
              - cv_deploy_results.warnings is defined and cv_deploy_results.warnings == []
              # confirm there are returned errors
              - cv_deploy_results.errors is defined and cv_deploy_results.errors != []
              # confirm that there is an error regarding both overlapping serial_number between avd-ci-leaf1 and avd-ci-leaf2
              # and overlapping system_mac_address between avd-ci-spine1 and avd-ci-spine2
              - >
                cv_deploy_results.errors | select('search', '.*Duplicated devices found in inventory.*' +
                hostvars['avd-ci-leaf1'].serial_number +
                '.*avd-ci-leaf1.*avd-ci-leaf2.*' +
                hostvars['avd-ci-spine1'].metadata.system_mac_address +
                '.*avd-ci-spine1.*avd-ci-spine2.*') | list | length > 0

      always:

        - name: "(ALWAYS) {{ test_id | upper }} Display CVP detailed result"
          tags: ["{{ test_id }}"]
          run_once: true
          ansible.builtin.debug:
            var: cv_deploy_results

        - name: "(ALWAYS) {{ test_id | upper }} Cleanup orphan workspace"
          tags: ["{{ test_id }}"]
          run_once: true
          ansible.legacy.uri:
            url: https://{{ cv_server }}/api/resources/workspace/v1/WorkspaceConfig/some
            use_proxy: "{{ true if proxy_host and proxy_port else false }}"
            validate_certs: "{{ cv_verify_certs }}"
            return_content: true
            headers:
              Accept: "application/json"
              Content-Type: "application/json"
              Authorization: "Bearer {{ cv_token }}"
            method: POST
            body_format: json
            body:
              {
                "values": [
                  {
                    "key": {
                      "workspaceId": "{{ cv_deploy_results.workspace.id }}"
                    },
                    "request": "REQUEST_ABANDON",
                    "requestParams": {
                      "requestId": "{{ r }}"
                    }
                  }
                ]
              }
            force_basic_auth: true
            timeout: 10
          register: cvp_abandon_workspace_result
          until: cvp_abandon_workspace_result.status == 200
          retries: 3
          delay: 3
          ignore_errors: true
          when: cv_deploy_results.workspace.id is not none and cv_deploy_results.workspace.id | length > 0
          # Set HTTPS_PROXY environment variable scoped for this task only
          environment:
            https_proxy: >-
              http://{{ (proxy_username and proxy_password) | ternary(proxy_username ~ ':' ~ proxy_password ~ '@', '') }}{{ proxy_host }}:{{ proxy_port }}

        - name: "(ALWAYS) {{ test_id | upper }} Banner"
          tags: ["{{ test_id }}"]
          run_once: true
          ansible.builtin.debug:
            msg:
              - "### ENGAGE CV_DEPLOY ROLE TO CLEANUP AFTER {{ test_id[:69] | upper }} ###"

        - name: "(ALWAYS) {{ test_id | upper }} Cleanup"
          tags: ["{{ test_id }}"]
          run_once: true
          delegate_to: localhost
          ansible.builtin.import_role:
            name: arista.avd.cv_deploy
          vars:
            cv_workspace_name: "{{ cv_common_pattern }}_{{ r }}_cleanup"
            cv_workspace_description: "{{ cv_common_pattern + '_' + r + '_cleanup' | upper }}"
            cv_change_control_name: "{{ cv_common_pattern }}_{{ r }}_cleanup"
            cv_change_control_description: "{{ cv_common_pattern + '_' + r + '_cleanup' | upper }}"
            cv_register_detailed_results: true
            cv_devices: "{{ ansible_play_hosts_all }}"
            eos_config_dir: "{{ playbook_dir }}/intended/configs/base_configs"
            structured_dir: "{{ playbook_dir }}/intended/structured_configs/base_configs"
            cv_submit_workspace_force: true
            cv_run_change_control: true
