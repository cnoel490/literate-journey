[tool.black]
# Black has been replaced with Ruff.
force-exclude = '''.*'''

[tool.isort]
# Isort has been replaced with Ruff.
skip_glob = ["**/*"]

[tool.ruff]
line-length = 160
extend-exclude = [
  "python-avd/pyavd/_cv/api/**/*",
  "python-avd/tests/pyavd/schema/data_merging_schema_class.py", # File is generated during pytest
]
target-version = "py310"

[tool.ruff.lint]
# D213 is forced here since it will be removed by pydocstyle.convention = 'google' even when we have ALL here.
extend-select = ["ALL", "D213"]
ignore = [
  "D203",     # Ignoring conflicting D* warnings - one-blank-line-before-class
  "D212",     # Ignoring conflicting D* warnings - multi-line-summary-first-line
  "COM812",   # Ignoring conflicting rules that may cause conflicts when used with the formatter
  "ISC001",   # Ignoring conflicting rules that may cause conflicts when used with the formatter
  "TD002",    # We don't have require authors in TODO
  "TD003",    # We don't have an issue link for all TODOs today
  "FIX002",   # Line contains TODO - ignoring for ruff for now
  "SLF001",   # Accessing private members - TODO: Improve code
  "D100",     # Missing docstring in public module - TODO: Improve code
  "D101",     # Missing docstring in public class - TODO: Improve code
  "D102",     # Missing docstring in public method - TODO: Improve code
  "D103",     # Missing docstring in public function - TODO: Improve code
  "D104",     # Missing docstring in public package
  "D105",     # Missing docstring in magic method - TODO: Improve code
  "D106",     # Missing docstring in public nested class - TODO: Improve code
  "D107",     # Missing docstring in `__init__` - TODO: Improve code
  "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed - TODO: Improve code
  "C901",     # complex-structure - TODO: Improve code
  "FBT001",   # Boolean-typed positional argument in function definition - TODO: Improve code
  "FBT002",   # Boolean default positional argument in function definition - TODO: Improve code
  "PD011",    # Use numpy instead of .values - False positive
  "BLE001",   # Do not catch blind exception: `Exception - TODO: Improve code
  "PLR2004",  # Magic value used in comparison - TODO: Evaluate
  "DTZ005",   # `datetime.datetime.now()` called without a `tz` argument - TODO: Improve code
  "ASYNC109", # async-function-with-timeout: Our async functions call several other async functions and we need each of those calls to be governed by the configurable timeout.
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"ansible_collections/arista/avd/plugins/*/*.py" = [
  "E402",   # Ansible plugins require a layout with imports below the docs
  "INP001", # implicit namespace package. Add an `__init__.py` - Ansible plugins are not in packages
]
"ansible_collections/arista/avd/molecule/eos_designs_unit_tests/custom_modules/*.py" = [
  "INP001", # implicit namespace package. Add an `__init__.py` - TODO: Evaluate or see if it is a false positive
]
"python-avd/scripts/**/*.py" = [
  "T201",   # Interactive scripts can have print
  "INP001", # implicit namespace package. Add an `__init__.py` - TODO: Evaluate or see if it is a false positive
]
"python-avd/pyavd/_cv/client/*.py" = [
  "B904", # Within an `except` clause, raise exceptions with `raise - TODO: Improve code
]
"python-avd/pyavd/_eos_cli_config_gen/schema/__init__.py" = [
  "A002",    # Argument is shadowing a Python builtin - OK since these are data classes
  "PLR0913", # Too many arguments in function definition - OK since these are data classes
  "E501",    # Line too long - OK since we may have some very long vars or deeply nested with a long one-line description.
  "S107",    # Possible hardcoded password assigned to function default - False positive.
  "D205",    # 1 blank line required between summary line and description - OK since descriptions are autogenerated and for data fields.
]
"python-avd/pyavd/_eos_designs/schema/__init__.py" = [
  "A002",    # Argument is shadowing a Python builtin - OK since these are data classes
  "PLR0913", # Too many arguments in function definition - OK since these are data classes
  "E501",    # Line too long - OK since we may have some very long vars or deeply nested with a long one-line description.
  "S107",    # Possible hardcoded password assigned to function default - False positive.
  "S104",    # Possible binding to all interfaces - False positive.
  "S108",    # Probable insecure usage of temporary file or directory - False positive.
  "D205",    # 1 blank line required between summary line and description - OK since descriptions are autogenerated and for data fields.
]
"python-avd/pyavd/_eos_designs/eos_designs_facts/schema/protocol.py" = [
  "A002",    # Argument is shadowing a Python builtin - OK since these are data classes
  "PLR0913", # Too many arguments in function definition - OK since these are data classes
  "D205",    # 1 blank line required between summary line and description - OK since descriptions are autogenerated and for data fields.
]
"python-avd/tests/**/*" = [
  "S101",    # Accept 'assert' in pytest.
  "INP001",  # implicit namespace package. Add an `__init__.py` - Tests are not in packages
  "PLC0415", # `import` should be at the top-level of a file
]
"python/**/tests/**/*" = [
  "S101",   # Accept 'assert' in pytest.
  "INP001", # implicit namespace package. Add an `__init__.py` - Tests are not in packages
  "PLC0415", # `import` should be at the top-level of a file
]
"ansible_collections/arista/avd/tests/**/*" = [
  "S101",   # Accept 'assert' in pytest.
  "INP001", # implicit namespace package. Add an `__init__.py` - Tests are not in packages
]
"python-avd/pyavd/_anta/index.py" = [
  "F403", # Allow wildcard imports to avoid cluttering the index
  "F405", # Allow names defined in via a wildcard import
]

[tool.ruff.lint.pylint]
max-args = 15
max-branches = 54
max-returns = 10
max-statements = 148

[tool.ruff.lint.isort]
known-first-party = ["avdutils", "pyavd", "schema_tools"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.flake8-type-checking]
# These classes require that type annotations be available at runtime
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.pyright]
exclude = [
  "ansible_collections/arista/avd",                                      # TODO
  "python/avdutils/tests",                                               # TODO
  "python-avd/pyavd/api",                                                # TODO
  "python-avd/pyavd/_anta",                                              # TODO
  "python-avd/pyavd/_cv",                                                # TODO
  "python-avd/pyavd/_schema",                                            # TODO
  "python-avd/schema_tools",                                             # TODO
  "python-avd/tests",                                                    # TODO
  # Excluded
  "python-avd/pyavd/_cv/api",
  "python-avd/pyavd/_eos_cli_config_gen/j2templates/compiled_templates",
  "python-avd/pyavd/_eos_cli_config_gen/schema/__init__.py",
  "python-avd/pyavd/_eos_designs/eos_designs_facts/schema/protocol.py",
  "python-avd/pyavd/_eos_designs/j2templates/compiled_templates",
  "python-avd/pyavd/_eos_designs/schema/__init__.py",
]
pythonVersion = "3.10"

[tool.bumpversion]

current_version = "6.0.0-dev1"

allow_dirty = true
commit = false
tag = false
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        -                             # dash separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}-{pre_l}{pre_n}",
    "{major}.{minor}.{patch}",
]

[tool.bumpversion.parts.pre_l]
values = [
  "dev",
  "final",
]
optional_value = "final"

[[tool.bumpversion.files]]
filename = "ansible_collections/arista/avd/galaxy.yml"
search = "version: {current_version}"
replace = "version: {new_version}"

[[tool.bumpversion.files]]
filename = "Cargo.toml"
search = 'package.version = "{current_version}"'
replace = 'package.version = "{new_version}"'

### Bumping version using PEP440 style like x.y.z.dev1

[[tool.bumpversion.files]]
filename = "ansible_collections/arista/avd/requirements.txt"
search = "pyavd[ansible-collection]=={current_version}"
replace = "pyavd[ansible-collection]=={new_version}"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        \\.                           # dot separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}.{pre_l}{pre_n}",
    "{major}.{minor}.{patch}",
]

[[tool.bumpversion.files]]
filename = "python-avd/pyavd/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        \\.                           # dot separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}.{pre_l}{pre_n}",
    "{major}.{minor}.{patch}",
]
