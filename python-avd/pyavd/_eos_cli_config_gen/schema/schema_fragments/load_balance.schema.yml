# Copyright (c) 2023-2025 Arista Networks, Inc.
# Use of this source code is governed by the Apache License 2.0
# that can be found in the LICENSE file.
# yaml-language-server: $schema=../../../_schema/avd_meta_schema.json
# Line above is used by RedHat's YAML Schema vscode extension
# Use Ctrl + Space to get suggestions for every field. Autocomplete will pop up after typing 2 letters.
type: dict
keys:
  load_balance:
    type: dict
    description: Configuration for load balancing behavior across port-channels and ECMP paths.
    keys:
      policies:
        type: dict
        description: Collection of load balancing policy definitions.
        keys:
          sand_profiles:
            type: list
            description: List of load balancing profiles for SAND-based platforms, used for port-channel and ECMP hashing.
            primary_key: name
            items:
              type: dict
              keys:
                name:
                  type: str
                  description: Unique name of the load-balancing profile.
                fields:
                  type: dict
                  description: Configure packet fields used as input to the hash function for port-channel and ECMP load balancing.
                  keys:
                    udp:
                      type: dict
                      description: |-
                        UDP-specific fields used in the load balancing hash.
                        Requires EOS version 4.33.1F or higher.
                      keys:
                        dst_port:
                          type: int
                          required: true
                          min: 0
                          max: 65535
                          description: Use the UDP destination port as a hash input.
                          convert_types:
                            - str
                        payload_bytes:
                          type: str
                          description: |-
                            Specifies the UDP payload bytes to use in hash calculation.
                            Accepts single bytes (e.g., "10"), comma-separated bytes (e.g., "0,1,5"),
                            ranges (e.g., "0-15"), or combinations (e.g., "0-10,12,15,20-25").
                            Valid values are between 0 and 62.
                          convert_types:
                            - int
                        match:
                          type: dict
                          description: Configuration to match specific bits and define custom payload-based hashing.
                          keys:
                            payload_bits:
                              type: str
                              required: true
                              description: |-
                                Specifies the bit positions within the UDP payload to match for hashing.
                                Accepts a single bit (e.g., "12"), a comma-separated list (e.g., "0,3,8"),
                                a range (e.g., "0-15"), or combinations (e.g., "0-7,9,12-15").
                                Valid values must be in the range 0 to 503.
                                Matching is limited to a maximum of 16 bits total.
                              convert_types:
                                - int
                            pattern:
                              type: str
                              required: true
                              description: |-
                                Bit pattern to match in the UDP payload.
                                The value should be given as an hexadecimal format `0x...`.
                                The valid range is from 0 to (2^N - 1), where N is the number of bits selected in `payload_bits`.
                            hash_payload_bytes:
                              type: str
                              required: true
                              description: |-
                                Specifies the UDP payload byte positions to include in the hash after pattern match.
                                Accepts a single byte (e.g., "5"), a comma-separated list (e.g., "0,3,7"),
                                a range (e.g., "0-15"), or a combination (e.g., "0-5,8,12-14").
                                All byte positions must be within the range 0 to 62.
                              convert_types:
                                - int
      cluster:
        type: dict
        keys:
          destination_grouping:
            type: str
            valid_values:
              - bgp field-set
              - prefix length
              - vtep
            description: Perform destination grouping using given setting.
          prefix_length:
            type: int
            convert_types:
              - str
            min: 0
            max: 129
            description: |-
              Network address prefix length for destination grouping using prefix length.
              This setting must be defined when `destination_grouping` is set to `prefix length`.
          forwarding_type:
            type: str
            valid_values:
              - "bridged encapsulation vxlan ipv4"
              - "routed ipv4"
          load_balance_method_flow_round_robin:
            type: bool
            description: Enable round-robin load balancing for flow-based traffic.
          flow:
            type: dict
            keys:
              monitor:
                type: bool
                description: Monitor the flows without affecting forwarding.
              source_learning_aging_timeout:
                description: Flow aging timeout in seconds for flow discovery by learning.
                type: int
                convert_types:
                  - str
                min: 30
                max: 2147483647
          port_groups:
            description: Host ports settings.
            type: list
            primary_key: group
            items:
              type: dict
              keys:
                group:
                  type: str
                  description: Port group name.
                balance_factor:
                  type: int
                  convert_types:
                    - str
                  min: 0
                  max: 4294967295
                interface:
                  type: str
                  description: |-
                    Ethernet interface/subinterface name. It could be a `,` separated list or range.
                    eg. Ethernet2,
                        Ethernet2-5,
                        Ethernet2.2,3.1,
                        Ethernet3.1-2
                flow:
                  type: dict
                  keys:
                    limit:
                      type: int
                      convert_types:
                        - str
                      description: Maximum number of flows per port.
                      min: 0
                      max: 4294967295
                    warning:
                      type: int
                      convert_types:
                        - str
                      min: 0
                      max: 4294967295
                      description: Warning threshold of flows per port group.
                    exhaustion_action:
                      description: Forwarding action when flows reach limits.
                      type: dict
                      keys:
                        dscp:
                          type: int
                          convert_types:
                            - str
                          min: 0
                          max: 63
                          description: Packet DSCP value.
                        traffic_class:
                          type: int
                          convert_types:
                            - str
                          min: 0
                          max: 11
                          description: Packet traffic-class value.
