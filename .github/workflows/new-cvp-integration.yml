---
name: "CV integration testing"

# "on": pull_request
"on": workflow_dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}

env:
  # Set -vvv is ACTIONS_STEP_DEBUG is set
  # Apparently it is set in secrets when running with debug
  ANSIBLE_VERBOSITY: ${{ secrets.ACTIONS_STEP_DEBUG && 3 || 0 }}
  AVD_NEVER_RUN_FROM_SOURCE: 1
  PY_COLORS: 1 # allows molecule colors to be passed to GitHub Actions
  ANSIBLE_FORCE_COLOR: 1 # allows ansible colors to be passed to GitHub Actions

jobs:
  # -------------------------------------- #
  # Build PyAVD wheel and upload artifact
  # -------------------------------------- #
  build_pyavd:
    name: Build pyavd
    runs-on: ubuntu-latest
    outputs:
      wheel_file: ${{ steps.build_step.outputs.wheel_file }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.12
      - name: Create pyavd wheel and output wheel path
        id: build_step
        working-directory: ./python-avd
        run: |
          pip install build
          python -m build --wheel
          WHEEL_FILE=$(find ./dist/*.whl -print0 -type f | xargs -0 -n 1 basename)
          echo "wheel_file=/tmp/pyavd/$WHEEL_FILE" >> "$GITHUB_OUTPUT"
      - name: Upload pyavd artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyavd
          path: ./python-avd/dist/*.whl

  # ----------------------------------------------- #
  # CV INTEGRATION MOLECULE TEST FOR CV_WORKFLOW    #
  # ----------------------------------------------- #
  molecule_cv_workflow:
    name: Run molecule test for new cvp integration
    runs-on: ubuntu-latest
    needs: [build_pyavd]
    strategy:
      fail-fast: true
      matrix:
        avd_scenario:
          - "cv_workflow"
        ansible_version:
          - "ansible-core<2.19.0 --upgrade"
    steps:
      - uses: actions/checkout@v5
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and Ansible requirements
        run: |
          python -m pip install "${{ matrix.ansible_version}}" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r .github/requirements-ci-molecule.txt
          ansible-galaxy install -r "ansible_collections/arista/avd/collections.yml"
      - name: Run molecule test
        working-directory: ansible_collections/arista/avd
        run: |
          molecule test --scenario-name ${{ matrix.avd_scenario }}
      - name: Check GIT status
        run: |
          sh .github/check-git-status.sh

  # ------------------------------------------- #
  # CV INTEGRATION MOLECULE TEST FOR CV_DEPLOY  #
  # ------------------------------------------- #
  molecule_cv_deploy:
    name: Run molecule test for new cvp integration
    runs-on: ubuntu-latest
    needs: [build_pyavd]
    strategy:
      fail-fast: true
      matrix:
        avd_scenario:
          - "cv_deploy"
        ansible_version:
          - "ansible-core<2.19.0 --upgrade"
    steps:
      - uses: actions/checkout@v5
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and Ansible requirements
        run: |
          python -m pip install "${{ matrix.ansible_version}}" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r .github/requirements-ci-molecule.txt
          ansible-galaxy install -r "ansible_collections/arista/avd/collections.yml"
      - name: Run molecule test
        working-directory: ansible_collections/arista/avd
        run: |
          molecule test --scenario-name ${{ matrix.avd_scenario }}
      - name: Check GIT status
        run: |
          sh .github/check-git-status.sh
