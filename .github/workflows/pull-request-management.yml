---
name: "Collection code testing"

"on":
  pull_request:
  merge_group:
  push:
    branches:
      - devel

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

env:
  # Set -vvv is ACTIONS_STEP_DEBUG is set
  # Apparently it is set in secrets when running with debug
  ANSIBLE_VERBOSITY: ${{ secrets.ACTIONS_STEP_DEBUG && 3 || 0 }}
  AVD_NEVER_RUN_FROM_SOURCE: 1
  PY_COLORS: 1 # allows molecule colors to be passed to GitHub Actions
  ANSIBLE_FORCE_COLOR: 1 # allows ansible colors to be passed to GitHub Actions
  # rust
  CARGO_TERM_COLOR: always

jobs:
  file-changes:
    runs-on: ubuntu-latest
    outputs:
      eos_design: ${{ steps.filter.outputs.eos_design }}
      config_gen: ${{ steps.filter.outputs.config_gen }}
      cloudvision: ${{ steps.filter.outputs.cloudvision }}
      dhcp: ${{ steps.filter.outputs.dhcp }}
      plugins: ${{ steps.filter.outputs.plugins }}
      requirements: ${{ steps.filter.outputs.requirements }}
      docs: ${{ steps.filter.outputs.docs }}
      anta_runner: ${{ steps.filter.outputs.anta_runner }}
      rust_src_or_ci_changed: ${{ steps.filter.outputs.rust_src_or_ci_changed }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            eos_design:
              - 'ansible_collections/arista/avd/roles/eos_designs/*'
              - 'ansible_collections/arista/avd/roles/eos_designs/**/*'
              - '.github/workflows/pull-request-management.yml'
              - 'ansible_collections/arista/avd/molecule/*'
              - 'ansible_collections/arista/avd/molecule/**/*'
              - 'python-avd/pyavd/_eos_designs/*'
              - 'python-avd/pyavd/_eos_designs/**/*'
              - '!ansible_collections/arista/avd/roles/eos_config_deploy_cvp/*'
              - '!ansible_collections/arista/avd/roles/eos_config_deploy_cvp/**/*'
              - '!ansible_collections/arista/avd/molecule/cvp_configlet_upload/*'
              - '!ansible_collections/arista/avd/molecule/cvp_configlet_upload/**/*'
            config_gen:
              - 'ansible_collections/arista/avd/roles/eos_cli_config_gen/*'
              - 'ansible_collections/arista/avd/roles/eos_cli_config_gen/**/*'
              - '.github/workflows/pull-request-management.yml'
              - 'ansible_collections/arista/avd/molecule/eos_cli_config_gen*/*'
              - 'ansible_collections/arista/avd/molecule/eos_cli_config_gen*/**/*'
              - 'python-avd/pyavd/_eos_cli_config_gen/*'
              - 'python-avd/pyavd/_eos_cli_config_gen/**/*'
            validate_state:
              - 'ansible_collections/arista/avd/roles/eos_validate_state/*'
              - 'ansible_collections/arista/avd/roles/eos_validate_state/**/*'
            cloudvision:
              - 'ansible_collections/arista/avd/roles/eos_config_deploy_cvp/*'
              - 'ansible_collections/arista/avd/roles/eos_config_deploy_cvp/**/*'
              - 'ansible_collections/arista/avd/molecule/cvp_configlet_upload/*'
              - 'ansible_collections/arista/avd/molecule/cvp_configlet_upload/**/*'
              - '.github/workflows/pull-request-management.yml'
            dhcp:
              - 'ansible_collections/arista/avd/roles/dhcp_provisioner/*'
              - 'ansible_collections/arista/avd/roles/dhcp_provisioner/**/*'
              - '.github/workflows/pull-request-management.yml'
            plugins:
              - 'ansible_collections/arista/avd/plugins/filter/**'
              - 'ansible_collections/arista/avd/plugins/test/**'
            requirements:
              - 'ansible_collections/arista/avd/requirements.txt'
              - 'ansible_collections/arista/avd/requirements-dev.txt'
              - 'ansible_collections/arista/avd/meta/runtime.yml'
              - '.github/requirements-ci-dev.txt'
              - '.github/workflows/pull-request-management.yml'
            docs:
              - '.github/workflows/pull-request-management.yml'
              - 'mkdocs.yml'
              - 'ansible_collections/arista/avd/docs/**'
              - 'ansible_collections/arista/avd/roles/**/*.md'
              - 'ansible_collections/arista/avd/**/*.md'
              - 'ansible_collections/arista/avd/README.md'
              - 'ansible_collections/arista/avd/**/*.schema.yml'
            pyavd:
              - 'python-avd/*'
              - 'python-avd/**/*'
            anta_runner:
              - 'ansible_collections/arista/avd/roles/anta_runner/*'
              - 'ansible_collections/arista/avd/roles/anta_runner/**/*'
              - 'python-avd/pyavd/_anta/*'
              - 'python-avd/pyavd/_anta/**/*'
              - 'python-avd/pyavd/api/_anta/*'
              - 'python-avd/pyavd/api/_anta/**/*'
              - 'python-avd/pyavd/get_device_anta_catalog.py'
            rust_src_or_ci_changed:
              - '.github/**/*'
              - 'rust/**/*'
              - 'python/avdutils/**/*'
              - 'Cargo.toml'

  # -------------------------------------- #
  # Build PyAVD wheel and upload artifact
  # -------------------------------------- #
  build_pyavd:
    name: Build pyavd
    runs-on: ubuntu-latest
    outputs:
      wheel_file: ${{ steps.build_step.outputs.wheel_file }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.12
      - name: Create pyavd wheel and output wheel path
        id: build_step
        working-directory: ./python-avd
        run: |
          pip install build
          python -m build --wheel
          WHEEL_FILE=$(find ./dist/*.whl -print0 -type f | xargs -0 -n 1 basename)
          echo "wheel_file=/tmp/pyavd/$WHEEL_FILE" >> "$GITHUB_OUTPUT"
      - name: Upload pyavd artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyavd
          path: ./python-avd/dist/*.whl

  # -------------------------------------------- #
  # Python type checking not covered in pre-commit
  # -------------------------------------------- #
  python_type_checking:
    name: Python Linting not covered in pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: PyRight static type checker
        # Specific SHA as allowed by github org admins
        uses: jakebailey/pyright-action@b5d50e5cde6547546a5c4ac92e416a8c2c1a1dfe

  # ----------------------------------- #
  # Test Requirements
  # ----------------------------------- #
  python_requirements:
    name: Test Python requirements installation
    runs-on: ubuntu-latest
    needs: [build_pyavd, file-changes]
    if: needs.file-changes.outputs.requirements == 'true'
    strategy:
      fail-fast: true
      matrix:
        python_version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: "Install Python requirements"
        run: |
          pip install "${{ needs.build_pyavd.outputs.wheel_file }}" -r ansible_collections/arista/avd/requirements-dev.txt --upgrade

  # ----------------------------------- #
  # EOS CLI CONFIG GEN MOLECULE
  # ----------------------------------- #
  molecule_eos_cli_config_gen:
    name: Validate eos_cli_config_gen
    runs-on: ubuntu-latest
    needs: [build_pyavd, file-changes]
    strategy:
      fail-fast: true
      matrix:
        avd_scenario:
          - "eos_cli_config_gen"
          - "eos_cli_config_gen_deprecated_vars"
          - "eos_cli_config_gen_negative_unit_tests"
        ansible_version:
          - "ansible-core<2.19.0"
        # Also test minimum ansible version for one scenario.
        include:
          - avd_scenario: "eos_cli_config_gen"
            ansible_version: "ansible-core==2.16.0"
    if: needs.file-changes.outputs.config_gen == 'true'
    steps:
      - uses: actions/checkout@v5
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and Ansible requirements
        run: |
          python -m pip install "${{ matrix.ansible_version}}" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r .github/requirements-ci-molecule.txt
      - name: Run molecule test
        working-directory: ansible_collections/arista/avd
        run: |
          molecule test --scenario-name ${{ matrix.avd_scenario }}
      - name: Check GIT status
        run: |
          sh .github/check-git-status.sh
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: molecule-${{ matrix.avd_scenario }}-artifacts
      #     path: ${PWD}/ansible_collections/arista/avd/molecule/${{ matrix.avd_scenario }}

  # ----------------------------------- #
  # DHCP PROVISIONNER MOLECULE
  # ----------------------------------- #
  molecule_dhcp_provisionner:
    name: Validate DHCP configuration
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        avd_scenario: ["dhcp_configuration", "dhcp_provisioning"]
        ansible_version: ["ansible-core<2.19.0"]
    needs: [build_pyavd, file-changes]
    if: needs.file-changes.outputs.dhcp == 'true'
    steps:
      - uses: actions/checkout@v5
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and Ansible requirements
        run: |
          python -m pip install "${{ matrix.ansible_version}}" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r .github/requirements-ci-molecule.txt
      - name: Run molecule test
        working-directory: ansible_collections/arista/avd
        run: |
          molecule test --scenario-name ${{ matrix.avd_scenario }}
      - name: Check GIT status
        run: |
          sh .github/check-git-status.sh
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: molecule-${{ matrix.avd_scenario }}-artifacts
      #     path: ${PWD}/ansible_collections/arista/avd/molecule/${{ matrix.avd_scenario }}

  # ----------------------------------- #
  # EOS Design MOLECULE
  # ----------------------------------- #
  molecule_eos_designs:
    name: Validate eos_designs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        avd_scenario:
          - "ansible_only"
          - "eos_designs_deprecated_vars"
          - "eos_designs-l2ls"
          - "eos_designs-mpls-isis-sr-ldp"
          - "eos_designs_negative_unit_tests"
          - "eos_designs-twodc-5stage-clos"
          - "eos_designs_unit_tests"
          - "evpn_underlay_ebgp_overlay_ebgp"
          - "evpn_underlay_isis_overlay_ibgp"
          - "evpn_underlay_ospf_overlay_ebgp"
          - "evpn_underlay_rfc5549_overlay_ebgp"
          - "example-campus-fabric"
          - "example-dual-dc-l3ls"
          - "example-isis-ldp-ipvpn"
          - "example-l2ls-fabric"
          - "example-single-dc-l3ls"
          - "example-single-dc-l3ls-ipv6"
          - "example-cv-pathfinder"
        ansible_version:
          # Testing all scenario with 2.16.x, due to bug with in 2.17.0 with and the way we test eos_designs_negative_unit_tests https://github.com/ansible/ansible/issues/83292
          - "ansible-core>=2.16.0,<2.17.0"
        include:
          - avd_scenario: "eos_designs_unit_tests"
            ansible_version: "ansible-core<2.18.0"
          - avd_scenario: "eos_designs_unit_tests"
            ansible_version: "ansible-core<2.19.0"
    needs: [build_pyavd, file-changes]
    if: needs.file-changes.outputs.eos_design == 'true' || needs.file-changes.outputs.config_gen == 'true'
    steps:
      - uses: actions/checkout@v5
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and Ansible requirements
        run: |
          python -m pip install "${{ matrix.ansible_version}}" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r .github/requirements-ci-molecule.txt
      - name: Run molecule test
        working-directory: ansible_collections/arista/avd
        run: |
          molecule test --scenario-name ${{ matrix.avd_scenario }}
      - name: Check GIT status
        run: |
          sh .github/check-git-status.sh

  molecule_eos_designs_minimum_requirements:
    name: Validate eos_designs with minimum requirements
    runs-on: ubuntu-latest
    needs: [build_pyavd, file-changes]
    if: needs.file-changes.outputs.eos_design == 'true' || needs.file-changes.outputs.config_gen == 'true'
    steps:
      - uses: actions/checkout@v5
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Use Python 3.10 for minimum requirements
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
      - name: Install pyavd and Ansible minimum requirements
        # Installing molecule and requirements in different pip command because of jsonschema>=3.2.0 in AVD is incompatible
        # with jsonschema>=4.9.1 in molecule when using pip compile with lowest
        # Need to delete min_requirements afterwards otherwise git status is sad
        run: |
          pip install uv
          uv pip compile python-avd/pyproject.toml --extra ansible-collection --resolution=lowest-direct > /tmp/pyavd/min_requirements.txt
          cat /tmp/pyavd/min_requirements.txt
          python -m pip install -r .github/requirements-ci-molecule.txt
          python -m pip install "ansible-core==2.16.0" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r /tmp/pyavd/min_requirements.txt
      - name: Run molecule test
        working-directory: ansible_collections/arista/avd
        run: |
          molecule test --scenario-name eos_designs_unit_tests
      - name: Check GIT status
        run: |
          sh .github/check-git-status.sh
  # ----------------------------------- #
  # Cloudvision MOLECULE
  # ----------------------------------- #
  molecule_cloudvision:
    name: Validate cvp_collection
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        avd_scenario:
          - "eos_config_deploy_cvp"
        ansible_version:
          - "ansible-core<2.19.0"
        include:
          - avd_scenario: "eos_config_deploy_cvp"
            ansible_version: "ansible-core==2.16.0"
    needs: [build_pyavd, file-changes]
    if: needs.file-changes.outputs.cloudvision == 'true' || needs.file-changes.outputs.eos_design == 'true' || needs.file-changes.outputs.config_gen == 'true'

    steps:
      - uses: actions/checkout@v5
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and Ansible requirements
        run: |
          python -m pip install "${{ matrix.ansible_version}}" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r .github/requirements-ci-molecule.txt
      - name: Run molecule test
        working-directory: ansible_collections/arista/avd
        run: |
          molecule test --scenario-name ${{ matrix.avd_scenario }}
      - name: Check GIT status
        run: |
          sh .github/check-git-status.sh
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: molecule-${{ matrix.avd_scenario }}-artifacts
      #     path: ${PWD}/ansible_collections/arista/avd/molecule/${{ matrix.avd_scenario }}
      #
  # ----------------------------------- #
  # ANTA Runner MOLECULE
  # ----------------------------------- #
  molecule_anta_runner:
    name: Validate anta_runner
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        avd_scenario:
          - "anta_runner"
        ansible_version:
          - "ansible-core<2.19.0"
        include:
          - avd_scenario: "anta_runner"
            ansible_version: "ansible-core==2.16.0"
    needs: [build_pyavd, file-changes]
    if: needs.file-changes.outputs.eos_design == 'true' || needs.file-changes.outputs.anta_runner == 'true'
    steps:
      - uses: actions/checkout@v5
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and Ansible requirements
        run: |
          python -m pip install "${{ matrix.ansible_version}}" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r .github/requirements-ci-molecule.txt
      - name: Run molecule test
        working-directory: ansible_collections/arista/avd
        run: |
          molecule test --scenario-name ${{ matrix.avd_scenario }}
      - name: Check GIT status
        run: |
          sh .github/check-git-status.sh

  # ----------------------------------- #
  # EOS Validate State MOLECULE
  # ----------------------------------- #
  molecule_eos_validate_state:
    name: Validate eos_validate_state
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        avd_scenario:
          - "eos_validate_state"
        ansible_version:
          - "ansible-core<2.19.0"
        include:
          - avd_scenario: "eos_validate_state"
            ansible_version: "ansible-core==2.16.0"
    needs: [build_pyavd, file-changes]
    if: needs.file-changes.outputs.eos_design == 'true' || needs.file-changes.outputs.validate_state == 'true'
    steps:
      - uses: actions/checkout@v5
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and Ansible requirements
        run: |
          python -m pip install "${{ matrix.ansible_version}}" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r .github/requirements-ci-molecule.txt
      - name: Run molecule test
        working-directory: ansible_collections/arista/avd
        run: |
          molecule test --scenario-name ${{ matrix.avd_scenario }}
      - name: Check GIT status
        run: |
          sh .github/check-git-status.sh

  # ----------------------------------- #
  # Ansible tests
  # ----------------------------------- #
  ansible_test_sanity:
    name: Run ansible-test sanity validation
    runs-on: ubuntu-latest
    needs: [build_pyavd, file-changes]
    strategy:
      fail-fast: true
      matrix:
        ansible_version: [stable, devel]
        include:
          - ansibe_version: stable
            pip_installation: "ansible-core<2.19.0"
          - ansibe_version: devel
            pip_installation: "--user https://github.com/ansible/ansible/archive/devel.tar.gz"
            skip_test: "--skip-test ansible-doc"
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12
            3.13
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and Ansible requirements
        run: |
          pip install  ${{ matrix.pip_installation }} "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]"
      - name: Run ansible-test sanity
        working-directory: ansible_collections/arista/avd
        # Skip ansible-doc due to testing with ansible-core @ devel and raising error on supported Ansible version
        run: |
          ansible-test sanity --color yes -v ${{ matrix.skip_test }}

  ansible_test_units:
    name: Run ansible-test units test cases
    runs-on: ubuntu-latest
    needs: [build_pyavd, file-changes]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.12
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install pyavd and ansible requirements
        run: |
          pip install "ansible-core<2.19.0" "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]"
      - name: Run ansible-test units
        working-directory: ansible_collections/arista/avd
        run: |
          ansible-test units --coverage --requirements -vv
          ansible-test coverage xml
          mv tests/output/reports/coverage.xml ./units-coverage.xml
      - name: Upload coverage from ansible-test units
        uses: actions/upload-artifact@v4
        with:
          name: ansible-test-units-coverage
          path: ansible_collections/arista/avd/units-coverage.xml

  ansible_test_integration:
    name: Run ansible-test integration test cases
    runs-on: ubuntu-latest
    needs: [file-changes]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.12
            3.13
      - name: Install Python requirements
        run: |
          pip install "ansible-core<2.19.0" -r .github/requirements-ci-dev.txt --upgrade
      - name: Run ansible-test integration test cases
        working-directory: ansible_collections/arista/avd
        run: |
          ansible-test integration --coverage --requirements -vv
          ansible-test coverage xml
          mv tests/output/reports/coverage.xml ./integration-coverage.xml
      - name: Upload coverage from ansible-test integration
        uses: actions/upload-artifact@v4
        with:
          name: ansible-test-integration-coverage
          path: ansible_collections/arista/avd/integration-coverage.xml

  # ----------------------------------- #
  # Build Collection
  # ----------------------------------- #
  build_collection:
    name: Build Ansible collection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.12
      - uses: actions/checkout@v5
      - name: Install Python & Ansible requirements
        run: |
          # distlib is required when using manifest
          pip install "ansible-core<2.19.0" distlib --upgrade
      - name: Build Ansible collection
        run: |
          ansible-galaxy collection build -vvv --force ansible_collections/arista/avd
      - name: Upload collection
        uses: actions/upload-artifact@v4
        with:
          name: avd-collection
          path: ./arista-avd-*.tar.gz

  # ----------------------------------- #
  # Galaxy Importer
  # ----------------------------------- #
  galaxy_importer:
    name: Test galaxy-importer
    runs-on: ubuntu-latest
    needs: [build_collection]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.11
      - uses: actions/checkout@v5
      - name: Install Python & Ansible requirements
        run: |
          pip install "ansible-core==2.16.0"
      - name: Download collection
        uses: actions/download-artifact@v5
        with:
          name: avd-collection
      - name: Install galaxy-importer
        # Install the specific version of galaxy-importer used on galaxy.ansible.com
        # The version conflicts with our requirements,
        # so we let the galaxy-importer version resolve remaining requirements.
        run: |
          pip install "galaxy-importer==0.4.31"
      - name: Run galaxy-importer checks
        run: python -m galaxy_importer.main *.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: importer-logs
          path: ./importer_result.json

  # ----------------------------------- #
  # Ansible Lint
  # Run on the built collection from Galaxy importer
  # ----------------------------------- #
  ansible_lint:
    name: Run ansible-lint test case
    runs-on: ubuntu-latest
    needs: [build_pyavd, build_collection]
    env:
      ANSIBLE_COLLECTIONS_PATH: /home/runner/work/avd/avd
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.10
            3.11
            3.12
            3.13
      - name: Download pyavd Artifact
        uses: actions/download-artifact@v5
        with:
          name: pyavd
          path: /tmp/pyavd/
      - name: Install Python & Ansible requirements
        run: |
          pip install "${{ needs.build_pyavd.outputs.wheel_file }}[ansible-collection]" -r ansible_collections/arista/avd/requirements-dev.txt --upgrade
      - name: Download collection
        uses: actions/download-artifact@v5
        with:
          name: avd-collection
      - name: Extract collection
        run: |
          mkdir collections
          tar xvzf arista-avd-*.tar.gz -C collections
      - name: Run ansible-lint
        working-directory: collections
        run: |
          ansible-lint --force-color --strict -v

  # ----------------------------------- #
  # Test of pyavd
  # ----------------------------------- #
  pyavd:
    name: Test pyavd
    runs-on: ubuntu-latest
    needs: [file-changes]
    if: |
      needs.file-changes.outputs.eos_design == 'true' ||
      needs.file-changes.outputs.config_gen == 'true' ||
      needs.file-changes.outputs.pyavd == 'true'
    strategy:
      matrix:
        python: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install tox
        run: |
          pip install tox tox-gh-actions --upgrade
      - name: Run pytest via tox for ${{ matrix.python }}
        working-directory: python-avd
        run: |
          tox
      - name: Upload coverage from pytest
        # Coverage only runs as part of 3.11.
        if: |
          matrix.python == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: pytest-coverage
          path: python-avd/coverage.xml

      - name: Upload eos_designs compiled templates from pytest
        if: |
          matrix.python == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: pytest-eos-designs-compiled-templates
          path: python-avd/pyavd/_eos_designs/j2templates/compiled_templates/

      - name: Upload eos_cli_config_gen compiled templates from pytest
        if: |
          matrix.python == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: pytest-eos-cli-config-gen-compiled-templates
          path: python-avd/pyavd/_eos_cli_config_gen/j2templates/compiled_templates/

  # ----------------------------------- #
  # Cargo build, test and linting
  # ----------------------------------- #
  cargo_build_and_test:
    name: Cargo build, test and linting on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [file-changes]
    if: needs.file-changes.outputs.rust_src_or_ci_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        # macos-13 covers x64 and macos-latest covers arm
        os:
          [
            ubuntu-latest,
            ubuntu-24.04-arm,
            windows-latest,
            macos-13,
            macos-latest,
          ]
    steps:
      - uses: actions/checkout@v5
        # This is needed for arm machines since they don't ship with 2024 edition.
      - name: Upgrade rust and cargo
        run: rustup update stable
      - name: Check code formatting with cargo fmt
        run: cargo fmt --verbose
        if: |
          matrix.os == 'ubuntu-latest'
      - name: Check code style with clippy
        run: cargo clippy --all-targets --all-features
        if: |
          matrix.os == 'ubuntu-latest'
      - name: Run all tests
        run: cargo test --all-targets --all-features
      - name: Generate coverage report with cargo llvm-cov
        run: |
          rustup component add llvm-tools-preview --toolchain stable-x86_64-unknown-linux-gnu
          cargo install cargo-llvm-cov
          cargo llvm-cov --all-targets --all-features --lcov --output-path lcov.info
        if: |
          matrix.os == 'ubuntu-latest'
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: rust-llvm-cov
          path: lcov.info
        if: |
          matrix.os == 'ubuntu-latest'
      - name: Test building to all targets
        run: cargo build --all-targets --all-features
      - name: Check Rust dependencies with cargo deny
        run: |
          cargo install cargo-deny
          cargo deny check
        if: |
          matrix.os == 'ubuntu-latest'

  # ----------------------------------- #
  # Python integration build and test
  # ----------------------------------- #
  python_rust_bindings_build_and_test:
    name: Python ${{ matrix.python }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [file-changes]
    if: needs.file-changes.outputs.rust_src_or_ci_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        # macos-13 covers x64 and macos-latest covers arm
        os:
          [
            ubuntu-latest,
            ubuntu-24.04-arm,
            windows-latest,
            macos-13,
            macos-latest,
          ]
        python: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v5
        # This is needed for arm machines since they don't ship with 2024 edition.
      - name: Upgrade rust and cargo
        run: rustup update stable
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install tox
        run: |
          pip install tox tox-gh-actions --upgrade
      - name: Run pytest via tox
        working-directory: python/avdutils
        # Running tox  which will build the package (including rust).
        # For most runs without an environment set here. The environment is mapped with the tox gh-action plugin.
        run: |
          tox

  # We always need the coverage report
  # Coverage only runs for ubuntu x64 on python 3.11.
  python_rust_bindings_coverage:
    name: Python 3.11 on ubuntu x64
    runs-on: ubuntu-latest
    needs: [file-changes]
    steps:
      - uses: actions/checkout@v5
      - name: Upgrade rust and cargo
        run: rustup update stable
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install tox
        run: |
          pip install tox tox-gh-actions --upgrade
      - name: Run pytest via tox
        working-directory: python/avdutils
        run: |
          tox -e coverage,report
      - name: Upload coverage from pytest
        uses: actions/upload-artifact@v4
        with:
          name: pytest-avdutils-coverage
          path: python/avdutils/coverage.xml
