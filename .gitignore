# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*.py-e
*$py.class
.j2cache/
*.log
*.pickle
.mypy_cache/
.coverage
coverage.xml
*.so

# Python source
/python/**/build/
/python/**/dist/
/python/**/*.egg-info/
/python/**/.tox/

# pyavd ignores
/python-avd/build/
/python-avd/dist/
/python-avd/pyavd.egg-info/
/python-avd/.tox/

# Ignore cloned cloudvision-python repo created during generation of _cv/api
/python-avd/pyavd/_cv/cloudvision-apis/

# top level installers
/*.tar.gz
## Ansible galaxy-importer
/importer_result.json
## ansible-builder
/_build

# mkdocs
/site

# ansible-lint ignores
ansible_collections/arista/avd/.ansible

# Development
## pyenv
.python-version
## .vscode/*
.vscode/

# OSX
*.DS_Store

# Checksum of schemas
*schema.sha1

# Temporary files creating during CI workflow
/tmp-requirements-minimum.txt

# Hash files created when running pyavd from source
python-avd/pyavd/*/j2templates/.hash
python-avd/pyavd/*/schema/schema_fragments/.hash

# Dynamically-created molecule artifacts
ansible_collections/arista/avd/extensions/molecule/cv_deploy/intended/structured_configs/test_duplicated_devices_configs/

### Rust development

# Generated by Cargo
# will have compiled files and executables
Cargo.lock
/target/
/debug/
/rust/**/debug/
/rust/**/target/

# These are backup files generated by rustfmt
*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# Coverage
/lcov.info
